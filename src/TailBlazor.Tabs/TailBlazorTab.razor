@namespace TailBlazor.Tabs
@implements ITab

<span @onclick="@Activate" aria-label="@(AriaLabel)" @onclick:preventDefault
    class="@(ContainerTabs.ActiveTab == this ? ActiveClass : Class)">
    @if (TitleContent != null) {
        @TitleContent
    } else {
        @Title
    }
</span>


@functions {

    [CascadingParameter] public TailBlazorTabs ContainerTabs { get; set; }
    [Parameter] public string ActiveClass { get; set; }
    [Parameter] public string Class { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public string AriaLabel { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public RenderFragment TitleContent { get; set; }
    [Parameter] public RenderFragment TabContent { get; set; }
    [Parameter] public EventCallback<ITab> OnClickCallback { get; set; }

    public int Id { get; private set; }
        
    protected override void OnInitialized()
    {
        if (String.IsNullOrEmpty(Class))
            Class = ContainerTabs.DefaultTabClass;    
        if (String.IsNullOrEmpty(ActiveClass))
            ActiveClass = ContainerTabs.DefaultTabActiveClass;
        if (String.IsNullOrEmpty(AriaLabel))
            AriaLabel = Title;

        Id = ContainerTabs.Tabs.Count();
        // make sure at least one tab is active
        ContainerTabs.AddTab(this);
    }

    public void Activate()
    {
        ContainerTabs.SetActivateTab(this);
        OnClickCallback.InvokeAsync(this.ContainerTabs.ActiveTab);
        StateHasChanged();
    }
}